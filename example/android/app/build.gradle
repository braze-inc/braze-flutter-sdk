def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    flutterRoot = System.env.FLUTTER_ROOT
    if (flutterRoot == null) {
        throw new FileNotFoundException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }


    defaultConfig {
        applicationId "braze.com.brazepluginexample"
        minSdkVersion 19
        compileSdkVersion 34
        targetSdkVersion 31
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }

    signingConfigs {
        appLinks {
            // To enable App Links with auto-verification:
            // 1. Generate a keystore for the example app.
            // 2. Input the corresponding information in the fields below.
            // 3. Host an `assetlinks.json` file containing the keystore's fingerprint online.
            //    More on that here: https://developer.android.com/training/app-links/verify-android-applinks#web-assoc
            // 4. Build the example app using the `appLinks` build variant.

            // Never post secrets or files containing them online or in a GitHub
            // repository accessible to people outside of your team.
            storeFile file('YOUR KEYSTORE FILE')
            storePassword 'YOUR STORE PASSWORD'
            keyAlias 'YOUR KEY ALIAS'
            keyPassword 'YOUR KEY PASSWORD'
        }
    }

    buildTypes {
        appLinks {
            signingConfig signingConfigs.appLinks
        }

        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
        }
    }

    kotlinOptions {
        freeCompilerArgs = ['-Xjvm-default=all']
        jvmTarget = "1.8"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    lint {
        disable 'InvalidPackage'
    }
    namespace 'braze.com.brazepluginexample'
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test:rules:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    implementation 'androidx.multidex:multidex:2.0.1'

    implementation "com.braze:android-sdk-ui:27.0.1"
    implementation "com.google.firebase:firebase-messaging:+"
}
apply plugin: 'com.google.gms.google-services'
